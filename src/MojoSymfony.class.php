<?php

/**
 * Symfony Tasks.
 *
 * @package    kiwi-web
 * @subpackage mojo - MojoSymfony
 * @author     Kyle Campbell
 */

class MojoSymfony extends Mojo
{
  function __construct($args)
  {
    require_once(dirname(__FILE__).'/../../../../config/ProjectConfiguration.class.php');
    $configuration = ProjectConfiguration::getApplicationConfiguration('frontend', 'prod', false);

    $this->args = $args;
    return $this;
  }

  function Help(){
    Mojo::exception("Acceptable use: $ mojo Symfony Translate --i18n=(./path/to/xml) --form=(string) --mojo_lib=(./path/to/mojo/install) --name=(string) --author=(string) --description=(string)"," - HELP - ");
  }
  
  function Validate(){

    if(empty($this->args['i18n'])) Mojo::exception("You must provide an xml or json source to read translations from. ex: --i18n=./path/to/messages.en.xml");
    if(!file_exists($this->args['i18n']) || !is_readable($this->args['i18n'])) Mojo::exception("Your source does not exist or cannot be read.");

    if(empty($this->args['form'])) Mojo::exception("You must provide an form source to implement rules for. ex: --form=FormName");
    if(!class_exists($this->args['form'])) Mojo::exception("The form object you provided does not exist in the current context.");

    if(!MojoUtils::getConfig('sf_mojo_dir') && isset($this->args['mojo_lib'])) MojoUtils::setConfig('sf_mojo_dir',$this->args['mojo_lib']);
    if(!MojoUtils::getConfig('sf_mojo_dir')) Mojo::exception("Your project directory is not defined. Specify it with --mojo_lib=./path/to/mojo/project/");
  }
  
  function Translate(){

    self::Validate();

    echo "\n";
    Mojo::prompt("symfony bootstrap complete");

    $xml = new SimpleXMLElement(file_get_contents($this->args['i18n']));
    $i18n = $xml->file->body;

    $class = $this->args['form'];
    $form = new $class;
    Mojo::prompt($form->getName()." form is now loaded");

    $form->configure();
    Mojo::prompt($form->getName()." form is now configured");
  
    $schema = $form->getValidatorSchema();
    Mojo::prompt($form->getName()." form schema is now ready");

    Mojo::prompt("=======================================================================================");
    Mojo::prompt("Analyzing form fields...");

    $rules = array();
    $rules[$form->getName()] = array();

    foreach($schema->getFields() as $k => $v){
      $rules[$form->getName()][$form->getName().'['.$k.']'] = array();
      Mojo::prompt("-------------");
      Mojo::prompt("Building rules for field: ".$form->getName().'['.$k.']');
      Mojo::prompt("=======================================================================================");

      $messages = $v->getMessages();
      $options = $v->getOptions();
        
        Mojo::prompt("Rules to build:");
        Mojo::prompt("-------------");
        foreach($messages as $i => $j){
            foreach($i18n->{'trans-unit'} as $t){
              if((string)$t->source == (string)$messages[$i]){
                $rules[$form->getName()][$form->getName().'['.$k.']'][$i]['value'] = (string)$t->target[0];
                $rules[$form->getName()][$form->getName().'['.$k.']'][$i]['key'] = $messages[$i];
                Mojo::prompt($form->getName().'['.$k.']'." - ".$t->target);
              }
            }
        }
        if(count($rules[$form->getName()][$form->getName().'['.$k.']']) < 1) Mojo::prompt("No rules to build");

#      print_r($messages);
#      print_r($options);
#      print_r($rules);
    }
#      echo "<pre>";
#      echo json_encode($rules);
#      print_r($rules);
      
      Mojo::prompt("=======================================================================================");
      Mojo::prompt("Rendering localized rules");
      self::printRule($rules,$form);
  }

  function printRule($rules,$form)
  {
      if(!isset($this->args['author'])) $this->args['author'] = 'Mojo Tasks - http://github.com/slajax/Mojo-Tasks';
      if(!isset($this->args['description'])) $this->args['description'] = 'Mojo Rules auto generated by Mojo Tasks';

      echo MojoUtils::editStream($this->args,self::Source('header'));

      $rule_count=1;
      foreach($rules[$form->getName()] as $rule => $validators){

        // is this the last item in the arr?
        $rule_end = ( $rule_count == count( $rules[$form->getName()] ) )
                      ?true:false;
                    
        $this->args['field'] = $rule;

        if( count($validators) > 0){

          echo MojoUtils::editStream($this->args,self::Source('field_start'));

          $validate_count=1;

          foreach($validators as $key => $value){

              #Mojo::prompt($key);
              //is this the last item in the arr?
              $validators_end = ( $validate_count == count($validators) )
                              ?true:false;
              switch($key){
                case 'required':

                  $this->args['message'] = $value['key'];
                  $this->args['rule'] = self::Source('is_required'); 
                  $this->args['params'] = "";
                  echo MojoUtils::editStream($this->args,self::Source('rule_start'));

                break;
                case 'min': case 'min_length':

                  $this->args['message'] = $value['key'];
                  $this->args['rule'] = self::Source('is_length');
                  $this->args['min'] = $options['min_length'] || 1;
                  $this->args['max'] = $options['max_length'] || 1;
                  echo MojoUtils::editStream($this->args,self::Source('rule_start'));
                  echo MojoUtils::editStream($this->args,self::Source('min_max'));

                break;
              }
            echo MojoUtils::editStream($this->args,self::Source('rule_end',$validators_end));
            $validate_count++;
          }
          echo MojoUtils::editStream($this->args,self::Source('field_end',$rule_end));
        }
        $rule_count++;
      }

      echo MojoUtils::editStream($this->args,self::Source('footer'));
  }

  function Source($partial,$end=false){
    ob_start();
    switch ($partial){
      case "header":
  return <<<EOF

/*
  Class: %NAME%
  Author: %AUTHOR%
  Description: %DESCRIPTION%
*/

dojo.provide("%NAME%");
dojo.require("mojo.helper.Validation");
var validate = mojo.helper.Validation.getInstance();

%NAME% = {
EOF;
      ob_end_flush();
      break;
      case "footer":

  return <<<EOF

  ]
};


EOF;
      ob_end_flush();
      break;
      case "field_start":
  return <<<EOF

    "%FIELD%": [      

EOF;
      ob_end_flush();
      break;
      case "field_end":
if($end){
  return <<<EOF
    ]
EOF;
}else{
  return <<<EOF
    ],
EOF;
}
      ob_end_flush();
      break;
      case "rule_start":
  return <<<EOF
      {
        "errorMsg": %MESSAGE%,
        "rule": %RULE%,

EOF;
      ob_end_flush();
      break;
      case "rule_end":
if($end){
  return <<<EOF
      }

EOF;
}else{
  return <<<EOF
      },

EOF;
}
      ob_end_flush();
      break;
      case "min_max":
  return <<<EOF
        "params": {
            "max": %MAX%,
            "min": %MIN%
        }

EOF;
      ob_end_flush();
      break;
      case "is_required":
  return <<<EOF
validate.isRequired
EOF;
      ob_end_flush();
      break;
      case "is_length":
  return <<<EOF
validate.isLength
EOF;
      ob_end_flush();
      break;
      case "is_type":
  return <<<EOF
validate.isType
EOF;
      ob_end_flush();
      break;


      default: return false; break;
    }
    return ob_get_contents();
  }  
}

?>
